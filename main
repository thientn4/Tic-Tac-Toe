#include <iostream>
#include <Windows.h>
#include <list>
#include "Option.h"
using namespace std;

const int scale = 3;
void draw(char XandO[scale][scale]);
void brain(char XandO[scale][scale]);
void AI(char XandO[scale][scale], bool playAgain);
void reset(char XandO[scale][scale]);
bool winOrLost(char XandO[scale][scale]);

////==============================================================================================================================////

int main()
{
	char XandO[scale][scale];
	reset(XandO);
	cout << "INSTRUCTION:\n";
	cout << "  - You will be X and the AI will be O\n";
	cout << "  - Choose a coordinate of x and y to fill in the square you want or enter 00 to end the game\n";
	cout << "  - You need 3 X's in a line to win\n";
	cout << endl;
	draw(XandO);
	brain(XandO);
	cout << "\nGAME OVER\n";
}

////==============================================================================================================================////

void reset(char XandO[scale][scale]) {
	for (int y = 0; y < scale; y++)
		for (int x = 0; x < scale; x++)
			XandO[y][x] = ' ';
}

void draw(char XandO[scale][scale]) {
	cout << "  ";
	for (int a = 0; a < scale; a++)
		cout << "  " << a + 1 << " ";
	cout << "  x" << endl;
	for (int b = 0; b < scale; b++) {
		cout << "  ";
		for (int c = 0; c < scale; c++)
			cout << "+---";
		cout << "+\n";
		cout << b + 1 << " ";
		for (int d = 0; d < scale; d++)
			cout << "| "<< XandO[d][b] <<" ";
		cout << "|\n";
	}
	cout << "  ";
	for (int e = 0; e < scale; e++)
		cout << "+---";
	cout << "+\n";
	cout << "y\n";
	cout << endl;
}

void brain(char XandO[scale][scale]) {
	bool playAgain = true;
	int xy;
	cout << "Please enter a coordinate in form of xy to play or 00 to end the game: ";
	cin >> xy;
	int x = xy / 10;
	int y = xy % 10;
	while (xy!=0) {
		if (x > scale || y > scale || xy % 10 == 0 || xy <= 10) {
			cout << "Please enter a valid coordinate in form of xy to play or 00 to end the game: ";
			cin >> xy;
			x = xy / 10;
			y = xy % 10;
		}else{
			if (XandO[x - 1][y - 1] != ' ') {
				cout << "Please enter another coordinate in form of xy to play or 00 to end the game: ";
				cin >> xy;
				x = xy / 10;
				y = xy % 10;
			}
			else {
				XandO[x - 1][y - 1] = 'x';
				draw(XandO);
				playAgain = winOrLost(XandO);
				AI(XandO, playAgain);
				playAgain = winOrLost(XandO);
				cout << "Please enter another coordinate in form of xy to play or 00 to end the game: ";
				cin >> xy;
				x = xy / 10;
				y = xy % 10;
				playAgain = true;
			}
		}
	}
}

////==============================================================================================================================////

bool endYet(char player, char XandO[scale][scale]) {
	int countRightSlash = 0;
	int countLeftSlash = 0;
	for (int i = 0; i < scale; i++) {
		int countRow = 0;
		int countLine = 0;
		if (XandO[i][i] == player)
			countRightSlash++;
		if (XandO[i][scale-1-i] == player)
			countLeftSlash++;
		for (int j = 0; j < scale; j++) {
			if (XandO[i][j] == player)
				countRow++;
			if (XandO[j][i] == player)
				countLine++;
		}
		if (countRow == scale || countLine == scale) {
			return true;
		}
	}
	if (countRightSlash == scale || countLeftSlash == scale)
		return true;
	return false;
}

bool tieYet(char XandO[scale][scale]) {
	int countBlank = 0;
	for (int i = 0; i < scale; i++)
		for (int j = 0; j < scale; j++)
			if (XandO[i][j] == ' ')
				countBlank++;
	if (countBlank == 0)
		return true;
	return false;
}

pair<int, int> attack(int nextMove, char nextPlayer, char current[scale][scale]) {
	int lWin = 0;
	int lLoss = 0;
	current[nextMove / 10][nextMove % 10] = nextPlayer;

	char nextNextPlayer = 'x';
	if (nextPlayer == 'x')nextNextPlayer = 'o';

	for (int i = 0;i < scale;i++) {
		for (int j = 0; j < scale; j++) {
			if (current[i][j] == ' ') {
				char predict[scale][scale];
				for (int a = 0; a < scale; a++)
					for (int b = 0; b < scale; b++) {
						predict[a][b] = current[a][b];
					}
				predict[i][j] = nextNextPlayer;
				if (endYet(nextNextPlayer, predict)) {
					if(nextNextPlayer=='x')
						return make_pair(0, 1);
					return make_pair(1, 0);
				}
			}
		}
	}

	for (int i = 0;i < scale;i++) {
		for (int j = 0; j < scale; j++) {
			if (current[i][j] == ' ') {
				char afterCurrent[scale][scale];
				for (int a = 0; a < scale; a++)
					for (int b = 0; b < scale; b++)
						afterCurrent[a][b] = current[a][b];
				pair<int, int> nextPair = attack(i * 10 + j, nextNextPlayer, afterCurrent);
				lWin += nextPair.first;
				lLoss += nextPair.second;
			}
		}
	}
	return make_pair(lWin, lLoss);
}

int bestOption(char XandO[scale][scale]) {
	list <Option>optionList;
	int instantWin = -1;
	int instantLoss = -1;
	for (int i = 0; i < scale; i++)
		for (int j = 0; j < scale; j++) {
			if (XandO[i][j] == ' ') {
				char current[scale][scale];
				char predictWin[scale][scale];
				char predictLoss[scale][scale];
				for (int a = 0; a < scale; a++)
					for (int b = 0; b < scale; b++) {
						current[a][b] = XandO[a][b];
						predictWin[a][b] = XandO[a][b];
						predictLoss[a][b] = XandO[a][b];
					}
				predictWin[i][j] = 'o';
				predictLoss[i][j] = 'x';
				if (endYet('o', predictWin)) {
					cout << "(x,y)=(" << i + 1 << "," << j + 1 << ") with instant win\n";
					instantWin = i * 10 + j;
				}
				if (endYet('x', predictLoss)) {
					cout << "(x,y)=(" << i + 1 << "," << j + 1 << ") with hot spot\n";
					instantLoss = i * 10 + j;
				}
				if (!endYet('o', predictWin) && !endYet('x', predictLoss)) {
					Option lOption;
					lOption.mOrder = i * 10 + j;
					pair<int, int> thisPair = attack(lOption.mOrder, 'o', current);
					lOption.mCountWin = thisPair.first;
					lOption.mCountLoss = thisPair.second;
					optionList.push_back(lOption);
					cout << "(x,y)=(" << i + 1 << "," << j + 1 << ") with " << (int)lOption.percentWin() << "% chance to win or tie\n";
				}
			}
		}
	if (instantWin != -1)
		return instantWin;
	if (instantLoss != -1)
		return instantLoss;
	Option lHighest = optionList.front();
	for (auto i : optionList) {
		if (i > lHighest) {
			lHighest = i;
		}
	}
	return lHighest.mOrder;
}

void AI(char XandO[scale][scale], bool playAgain) {
	if (playAgain == true) {
		cout << "PLEASE WAIT FOR AI TO THINK .";
		Sleep(500);
		cout << " .";
		Sleep(500);
		cout << " .";
		Sleep(500);
		cout << endl;
		int bestChoice = bestOption(XandO);
		XandO[bestChoice / 10][bestChoice % 10] = 'o';
		draw(XandO);
	}
}

////==============================================================================================================================////

bool winOrLost(char XandO[scale][scale]) {
	if (endYet('x', XandO)) {
		cout << "\nYOU WON THE GAME\n";
		cout << endl;
		reset(XandO);
		return false;
	}
	else if (endYet('o', XandO)){
		cout << "\nYOU LOST THE GAME\n";
		cout << endl;
		reset(XandO);
		return false;
	}
	else if(tieYet(XandO)) {
		cout << "\nTHAT WAS A TIE\n";
		cout << endl;
		reset(XandO);
		return false;
	}
	return true;
}
